{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","props","rand","Math","floor","random","monsters","map","mon","key","SearchBox","handleChange","useState","onChange","type","placeholder","App","state","searchText","e","setState","target","value","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"8UAaeA,G,kBAVF,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACX,OACI,yBAAKC,UAAU,QACf,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAI,YACrE,4BAAKJ,EAAQK,MACb,2BAAIL,EAAQM,UCMVC,EAXE,SAAAC,GACf,IAAMC,EAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAC7B,OACE,yBAAKX,UAAU,YACZO,EAAMK,SAASC,KAAI,SAAAC,GAAG,OACrB,kBAAC,EAAD,CAAMC,IAAG,UAAKD,EAAIZ,IAAT,OAAcM,GAAQT,QAASe,S,OCWjCE,G,MAhBG,SAAC,GAA6B,EAA5BJ,SAA6B,IAAnBK,EAAkB,EAAlBA,aAAkB,EAClBC,mBAAS,IADS,6BAG9C,OACE,yBAAKlB,UAAU,mBACb,yBAAKA,UAAU,gBACb,2BACEmB,SAAUF,IACVG,KAAK,OACLC,YAAY,6BCqBPC,E,4MA5BbC,MAAQ,CACNX,SAAU,GACVY,WAAY,I,EAEdP,aAAe,SAAAQ,GACb,EAAKC,SAAS,CAAEF,WAAYC,EAAEE,OAAOC,S,kEAElB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEd,SAAUqB,S,+BAGnC,IAAD,SAC0BC,KAAKX,MAA9BX,EADD,EACCA,SAAUY,EADX,EACWA,WACZW,EAAmBvB,EAASwB,QAAO,SAAAtB,GAAG,OAC1CA,EAAIV,KAAKiC,cAAcC,SAASd,EAAWa,kBAG7C,OACE,yBAAKrC,UAAU,OACb,kBAAC,EAAD,CAAWiB,aAAc,kBAAM,EAAKA,gBACpC,kBAAC,EAAD,CAAUL,SAAUuB,S,GAvBVI,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c506bbc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nconst Card = ({monster}) => {\r\n    return ( \r\n        <div className=\"Card\">\r\n        <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\r\n             <h1>{monster.name}</h1>\r\n             <p>{monster.email}</p>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Card;","import React from \"react\"\r\nimport \"./CardList.css\"\r\nimport Card from \"./Card\"\r\nconst CardList = props => {\r\n  const rand = Math.floor(Math.random() * 2)\r\n  return (\r\n    <div className=\"CardList\">\r\n      {props.monsters.map(mon => (\r\n        <Card key={`${mon.id}${rand}`} monster={mon} />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList\r\n","import React, { useState } from \"react\"\r\nimport \"./Search.css\"\r\n\r\nconst SearchBox = ({monsters, handleChange}) => {\r\n  const [search, setSearch] = useState(\"\")\r\n \r\n  return (\r\n    <div className=\"primary-content\">\r\n      <div className=\"resp-textbox\">\r\n        <input\r\n          onChange={handleChange()}\r\n          type=\"text\"\r\n          placeholder=\"Enter Search text...\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchBox\r\n","import React, { Component } from \"react\"\nimport \"./App.css\"\nimport CardList from \"./components/CardList\"\nimport SearchBox from './components/SearchBox';\nclass App extends Component {\n  state = {\n    monsters: [],\n    searchText: \"\"\n  }\n  handleChange = e => {\n    this.setState({ searchText: e.target.value })\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users => this.setState({ monsters: users }))\n  }\n\n  render() {\n    const { monsters, searchText } = this.state\n    const filteredMonsters = monsters.filter(mon =>\n      mon.name.toLowerCase().includes(searchText.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <SearchBox handleChange={() => this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}